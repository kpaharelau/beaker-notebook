/*
 *  Copyright 2015 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

def osName = System.properties['os.name']
def mac = false
def win = false
def linux = false
def platform = ''
if (osName.startsWith('Mac')) {
  mac = true
  platform = 'darwin'
} else if (osName.startsWith('Windows')) {
  win = true
  platform = 'win32'
} else if (osName.startsWith('Linux')) {
  linux = true
  platform = 'linux'
}
def electronName = ''
electronName = 'electron-v' + version + '-' + platform + '-' + arch

task makeInstaller(type: Exec, dependsOn: ['makeBundle', 'makeOSXDMG']) {
  if (mac) {
    commandLine './create-dmg/create-dmg', '--volname', 'Beaker', '--window-pos', '200', '120', '--window-size', '800', '400', '--icon-size', '100', '--icon', 'Beaker.app', '200', '190', '--hide-extension', 'Beaker.app', '--app-drop-link', '600', '185', 'Beaker.dmg', 'osxdmg/'
  } else if (win) {
    commandLine 'iscc', '/o./', '/fbeaker_setup', 'makeWinInstaller.iss'
  }
}

task createBundle(dependsOn: ['nodeInstall', 'copyBeakerApp', 'copyDist', 'copyJRE', 'copyTools', 'macCopyElectron', 'copyPList', 'copyIcons', 'winCopyPython', 'winRename', 'winChangeIcon', 'linuxDepScript']) {
}

task makeBundle(dependsOn: ['createBundle', 'checkIdentity', 'signBundle']) {
}

task runElectron(type: Exec, dependsOn: ['unzipJRE', 'unzipPython', 'nodeInstall', 'makeDist']) {
  if (win) {
    commandLine 'cmd', '/c', 'electron', '--disable-http-cache', 'app'
  } else {
    commandLine 'electron', '--disable-http-cache', 'app'
  }
}

task makeDist (dependsOn: ":beaker:build") << {
  copy {
    from '../../core/config'
    into './dist/config'
  }
  copy {
    from '../../core/src/main/web'
    into './dist/src/main/web'
  }
  copy {
    from '../../core/build/install/core'
    into './dist/build/install/core'
  }
  copy {
    from '../../core/nginx'
    into './dist/nginx'
  }
  copy {
    from '../../core/LICENSE'
    into './dist/'
  }
  if (mac || linux) {
    copy {
      from '../../core/beaker.command'
      into './dist/'
    }
  }
  else if (win) {
    copy {
      from '../../core/beaker.command.bat'
      into './dist/'
    }
  }
}

task cleanElectron(type: Delete) {
  delete 'dist', 'Beaker.app', '__MACOSX', 'jre', 'beaker', 'osxdmg', 'Beaker.dmg', 'python', 'beaker_setup.exe'
}

task realCleanElectron(type: Delete, dependsOn: 'cleanElectron') {
  delete 'app/node_modules', fileTree(dir: './', include: "electron*.zip")
}

// Global tasks
task installElectron(type: Exec) {
  if (win || mac) {
    commandLine 'npm', 'install', 'electron-prebuilt', '-g'
  } else if (linux) {
    commandLine 'sudo', 'npm', 'install', 'electron-prebuilt', '-g'
  }
}

task nodeInstall(type: Exec) {
  if (win) {
    commandLine 'cmd', '/c', 'npm', '--prefix', './app', 'install', './app'
  } else {
    commandLine 'npm', '--prefix', './app', 'install', './app'
  }
}

task unzipJRE(type: Exec) {
  commandLine 'unzip', '-uo', 'jre.zip'
}

task downloadElectron(type: Exec) {
  if (win) {
    def url = '\\"https://github.com/atom/electron/releases/download/v' + version + '/' + electronName + '.zip\\"'
    def fileName = '\\"' + electronName + '.zip\\"'
    commandLine 'PowerShell', "(New-Object System.Net.WebClient).DownloadFile(" + url + ", " + fileName + ")"
  } else {
    outputs.file('./' + electronName + '.zip')
    commandLine 'curl', '-LO', 'https://github.com/atom/electron/releases/download/v' + version + '/' + electronName + '.zip'
  }
}

task unzipElectron(type: Exec, dependsOn: ['downloadElectron']) {
  commandLine 'unzip', '-uo', '-d', 'beaker', electronName
}

task copyBeakerApp(type: Copy, dependsOn: 'nodeInstall') {
  from 'app'
  if (mac) {
    dependsOn 'macCopyElectron'
    into 'Beaker.app/Contents/Resources/app'
  } else if (win || linux) {
    dependsOn 'unzipElectron'
    into 'beaker/resources/app'
  }
}

task copyDist(type: Copy, dependsOn: ['makeDist']) {
  from 'dist'
  if (mac) {
    dependsOn 'macCopyElectron'
    into 'Beaker.app/Contents/Resources/dist'
  } else if (win || linux) {
    into 'beaker/resources/dist'
  }
}

task copyJRE(type: Copy, dependsOn: ['unzipJRE']) {
  from 'jre'
  if (mac) {
    dependsOn 'macCopyElectron'
    into 'Beaker.app/Contents/Resources/jre'
  } else if (win || linux) {
    into 'beaker/resources/jre'
  }
}

task copyTools(type: Copy, dependsOn: 'copyJRE') {
  from 'tools.jar'
  if (mac) {
    into 'Beaker.app/Contents/Resources/jre/Contents/Home/lib'
  } else if (win || linux) {
    into 'beaker/resources/jre/lib'
  }
}

// OSX build
task signBundle (type: Exec, dependsOn: ['createBundle', 'checkIdentity']) {
  commandLine 'codesign', '--deep', '--force', '--verbose', '--sign', "Developer ID Application: Two Sigma Open Source LLC.", 'Beaker.app'
}
signBundle.onlyIf { mac }

task checkIdentity(type: Exec, dependsOn: 'createBundle') {
  ignoreExitValue = true
  standardOutput = new ByteArrayOutputStream()
  errorOutput = standardOutput
  commandLine 'codesign', '--sign', "Two Sigma Open Source LLC."
  doLast {
    // Identity valid
    if (execResult.exitValue != 2) {
      println 'Two Sigma Identity not found. Unsigned Beaker.app still produced'
      signBundle.enabled = false
    }
  }
}
checkIdentity.onlyIf { mac }

task macCopyElectron(type: Exec, dependsOn: ['unzipElectron']) {
  commandLine 'rsync', '-a', 'beaker/Electron.app/', 'Beaker.app'
}
macCopyElectron.onlyIf { mac }

task makeOSXDMG(dependsOn: 'makeBundle') << {
  ant.move(file: 'Beaker.app', tofile: 'osxdmg/Beaker.app')
}
makeOSXDMG.onlyIf { mac }

task removePList(type: Delete, dependsOn: 'macCopyElectron') {
  delete 'Beaker.app/Contents/Info.plist', 'Beaker.app/Contents/Resources/atom.icns'
}
removePList.onlyIf { mac }

task copyPList(type: Copy, dependsOn: ['macCopyElectron', 'removePList']) {
  from 'Info.plist'
  into 'Beaker.app/Contents'
}
copyPList.onlyIf { mac }

task copyIcons(type: Copy, dependsOn: 'macCopyElectron') {
  from 'beaker.icns'
  into 'Beaker.app/Contents/Resources'
}
copyIcons.onlyIf { mac }

// Windows build
task unzipPython(type: Exec) {
  commandLine 'unzip', '-uo', '-d', 'python', 'python.zip'
}
unzipPython.onlyIf { win }

task winCopyPython(type: Copy, dependsOn: ['unzipPython', 'copyDist']) {
  from 'python'
  into 'beaker/resources/dist/python'
}
winCopyPython.onlyIf { win }

task winRename(type: Exec, dependsOn: ['unzipElectron']){
  commandLine 'mv', 'beaker/electron.exe', 'beaker/beaker.exe'
}
winRename.onlyIf{ win }

task winChangeIcon(type: Exec, dependsOn: ['winRename', 'unzipElectron']) {
  commandLine './rcedit.exe', 'beaker/beaker.exe', '--set-icon', 'beaker.ico'
}
winChangeIcon.onlyIf{ win }

// Linux build
task linuxDepScript(type: Copy, dependsOn: 'copyDist') {
  from '../ubuntu/install-dependencies.sh'
  into 'beaker/resources/dist/'
}
linuxDepScript.onlyIf { linux }
